@using Blazored.Modal
@using Blazored.Modal.Services
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
@inject HttpClient Http
@inject IModalService Modal

<LoadingSpinner IsLoading="@isLoading" />

<ModalWrapper>
    <ModalHeader>
        <h3>Register</h3>
    </ModalHeader>
    <ModalBody>
        <button class="btn btn-success" @onclick="RegisterWithoutNostr">Register with username</button>
        <button class="btn btn-primary" @onclick="RegisterWithNostr">Register with nos2x</button>
    </ModalBody>
    <ModalFooter>
        <div class="d-flex justify-content">
            <button type="button" class="btn btn-danger" @onclick="CloseModal">Cancel</button>
        </div>
    </ModalFooter>
</ModalWrapper>


@code {

    [CascadingParameter] public BlazoredModalInstance ModalInstance { get; set; } = default!;
    private bool isLoading = false;


    // REGISTRATION WITHOUT NOSTR EXTENSION
    private async Task RegisterWithoutNostr()
    {
        isLoading = true;
        await CloseModal();
        await OpenNextFormWithoutNostr();
    }

    private async Task OpenNextFormWithoutNostr()
    {
        isLoading = true;
        var parameters = new ModalParameters();
        var options = new ModalOptions { };
        Modal.Show<RegisterDetailsWithoutNostrModal>("Select Invoice Type", parameters, options);
    }

    // REGISTRATION WITH NOSTR EXTENSION
    private async Task RegisterWithNostr()
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            string pubKey = await JsRuntime.InvokeAsync<string>("nos2x.getPublicKey");
            string secret = Guid.NewGuid().ToString();

            var response = await Http.PostAsJsonAsync("/api/auth/registernewuser", new
            {
                PubKey = pubKey,
                Secret = secret
            });

            if (response.IsSuccessStatusCode)
            {
                await OpenNextFormWithNostr();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Conflict)
            {
                await JsRuntime.InvokeVoidAsync("alert", "This pubkey is already registered, try to login instead.");
                isLoading = false; // Hide spinner if there is an error
                StateHasChanged();
            }
            else
            {
                string errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Registration failed: {errorContent}");
                isLoading = false; // Hide spinner if there is an error
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during registration: {ex.Message}");
            isLoading = false; // Hide spinner if there is an exception
            StateHasChanged();
        }
    }

    private async Task OpenNextFormWithNostr()
    {
        var parameters = new ModalParameters();
        var options = new ModalOptions { };
        await CloseModal();
        Modal.Show<RegisterDetailsWithNostrModal>("Select Invoice Type", parameters, options);
    
        isLoading = false;
        StateHasChanged();
    }

    private async Task CloseModal()
    {
        await ModalInstance.CloseAsync();
    }
}
